// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/shopspring/decimal"
)

const createCreditTransaction = `-- name: CreateCreditTransaction :one
INSERT INTO transactions (account_id, transfer_id, amount, trx_type, created_at)
VALUES ($1, $2, $3, 'CREDIT', NOW())
RETURNING id, account_id, transfer_id, amount, trx_type, created_at
`

type CreateCreditTransactionParams struct {
	AccountID  int64           `db:"account_id" json:"account_id"`
	TransferID sql.NullInt64   `db:"transfer_id" json:"transfer_id"`
	Amount     decimal.Decimal `db:"amount" json:"amount"`
}

func (q *Queries) CreateCreditTransaction(ctx context.Context, arg CreateCreditTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createCreditTransaction, arg.AccountID, arg.TransferID, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.TransferID,
		&i.Amount,
		&i.TrxType,
		&i.CreatedAt,
	)
	return i, err
}

const createDebitTransaction = `-- name: CreateDebitTransaction :one
INSERT INTO transactions (account_id, transfer_id, amount, trx_type, created_at)
VALUES ($1, $2, $3, 'DEBIT', NOW())
RETURNING id, account_id, transfer_id, amount, trx_type, created_at
`

type CreateDebitTransactionParams struct {
	AccountID  int64           `db:"account_id" json:"account_id"`
	TransferID sql.NullInt64   `db:"transfer_id" json:"transfer_id"`
	Amount     decimal.Decimal `db:"amount" json:"amount"`
}

func (q *Queries) CreateDebitTransaction(ctx context.Context, arg CreateDebitTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createDebitTransaction, arg.AccountID, arg.TransferID, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.TransferID,
		&i.Amount,
		&i.TrxType,
		&i.CreatedAt,
	)
	return i, err
}

const createTransferTransaction = `-- name: CreateTransferTransaction :one
SELECT transfer_funds($1, $2, $3) as result
`

type CreateTransferTransactionParams struct {
	ParamFromAccountID int64  `db:"param_from_account_id" json:"param_from_account_id"`
	ParamToAccountID   int64  `db:"param_to_account_id" json:"param_to_account_id"`
	ParamAmount        string `db:"param_amount" json:"param_amount"`
}

func (q *Queries) CreateTransferTransaction(ctx context.Context, arg CreateTransferTransactionParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, createTransferTransaction, arg.ParamFromAccountID, arg.ParamToAccountID, arg.ParamAmount)
	var result interface{}
	err := row.Scan(&result)
	return result, err
}
